// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SetStats.Data;

#nullable disable

namespace SetStats.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250517145628_MakeTrainingProgramTrainingCycleOneToOne")]
    partial class MakeTrainingProgramTrainingCycleOneToOne
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("rolenameindex");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("SetStats.Core.Entities.CompletedSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ActualReps")
                        .HasColumnType("integer")
                        .HasColumnName("actual_reps");

                    b.Property<decimal>("ActualWeight")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("actual_weight");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("ProgrammedSetId")
                        .HasColumnType("uuid")
                        .HasColumnName("programmed_set_id");

                    b.Property<int?>("RateOfPerceivedExertion")
                        .HasColumnType("integer")
                        .HasColumnName("rate_of_perceived_exertion");

                    b.HasKey("Id")
                        .HasName("pk_completed_sets");

                    b.HasIndex("ProgrammedSetId")
                        .IsUnique()
                        .HasDatabaseName("ix_completed_sets_programmed_set_id");

                    b.ToTable("completed_sets", (string)null);
                });

            modelBuilder.Entity("SetStats.Core.Entities.ExerciseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_exercise_types");

                    b.ToTable("exercise_types", (string)null);
                });

            modelBuilder.Entity("SetStats.Core.Entities.ProgrammedSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ExerciseTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("exercise_type_id");

                    b.Property<bool>("IsAMRAP")
                        .HasColumnType("boolean")
                        .HasColumnName("is_a_m_r_a_p");

                    b.Property<decimal>("PercentageOfTrainingMax")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("percentage_of_training_max");

                    b.Property<int>("SetOrder")
                        .HasColumnType("integer")
                        .HasColumnName("set_order");

                    b.Property<int>("TargetReps")
                        .HasColumnType("integer")
                        .HasColumnName("target_reps");

                    b.Property<Guid>("WorkoutDayId")
                        .HasColumnType("uuid")
                        .HasColumnName("workout_day_id");

                    b.HasKey("Id")
                        .HasName("pk_programmed_sets");

                    b.HasIndex("ExerciseTypeId")
                        .HasDatabaseName("ix_programmed_sets_exercise_type_id");

                    b.HasIndex("WorkoutDayId", "ExerciseTypeId", "SetOrder")
                        .IsUnique()
                        .HasDatabaseName("ix_programmed_sets_workout_day_id_exercise_type_id_set_order");

                    b.ToTable("programmed_sets", (string)null);
                });

            modelBuilder.Entity("SetStats.Core.Entities.ProgressRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ExerciseTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("exercise_type_id");

                    b.Property<bool>("IsPersonalRecord")
                        .HasColumnType("boolean")
                        .HasColumnName("is_personal_record");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_date");

                    b.Property<int>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("reps");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<decimal>("Weight")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_progress_records");

                    b.HasIndex("ExerciseTypeId")
                        .HasDatabaseName("ix_progress_records_exercise_type_id");

                    b.HasIndex("UserId", "ExerciseTypeId", "Weight", "Reps")
                        .IsUnique()
                        .HasDatabaseName("ix_progress_records_user_id_exercise_type_id_weight_reps");

                    b.ToTable("progress_records", (string)null);
                });

            modelBuilder.Entity("SetStats.Core.Entities.TrainingCycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CycleNumber")
                        .HasColumnType("integer")
                        .HasColumnName("cycle_number");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<decimal>("RoundingFactor")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("rounding_factor");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<Guid>("TrainingProgramId")
                        .HasColumnType("uuid")
                        .HasColumnName("training_program_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_training_cycles");

                    b.HasIndex("TrainingProgramId")
                        .HasDatabaseName("ix_training_cycles_training_program_id");

                    b.HasIndex("UserId", "CycleNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_training_cycles_user_id_cycle_number");

                    b.ToTable("training_cycles", (string)null);
                });

            modelBuilder.Entity("SetStats.Core.Entities.TrainingProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Goal")
                        .HasColumnType("text")
                        .HasColumnName("goal");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_training_programs");

                    b.HasIndex("UserId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_training_programs_user_id_name");

                    b.ToTable("training_programs", (string)null);
                });

            modelBuilder.Entity("SetStats.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("emailindex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("usernameindex");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SetStats.Core.Entities.UserMax", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("ActualOneRepMax")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("actual_one_rep_max");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_recorded");

                    b.Property<decimal>("EstimatedOneRepMax")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("estimated_one_rep_max");

                    b.Property<Guid>("ExerciseTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("exercise_type_id");

                    b.Property<decimal>("RoundingFactor")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("rounding_factor");

                    b.Property<Guid>("TrainingCycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("training_cycle_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_maxes");

                    b.HasIndex("ExerciseTypeId")
                        .HasDatabaseName("ix_user_maxes_exercise_type_id");

                    b.HasIndex("TrainingCycleId")
                        .HasDatabaseName("ix_user_maxes_training_cycle_id");

                    b.HasIndex("UserId", "ExerciseTypeId", "TrainingCycleId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_maxes_user_id_exercise_type_id_training_cycle_id");

                    b.ToTable("user_maxes", (string)null);
                });

            modelBuilder.Entity("SetStats.Core.Entities.WorkoutDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("WorkoutDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("workout_date");

                    b.Property<Guid>("WorkoutWeekId")
                        .HasColumnType("uuid")
                        .HasColumnName("workout_week_id");

                    b.HasKey("Id")
                        .HasName("pk_workout_days");

                    b.HasIndex("WorkoutWeekId")
                        .HasDatabaseName("ix_workout_days_workout_week_id");

                    b.HasIndex("UserId", "WorkoutWeekId", "WorkoutDate")
                        .IsUnique()
                        .HasDatabaseName("ix_workout_days_user_id_workout_week_id_workout_date");

                    b.ToTable("workout_days", (string)null);
                });

            modelBuilder.Entity("SetStats.Core.Entities.WorkoutWeek", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("TrainingCycleId")
                        .HasColumnType("uuid")
                        .HasColumnName("training_cycle_id");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("integer")
                        .HasColumnName("week_number");

                    b.Property<int>("WeekType")
                        .HasColumnType("integer")
                        .HasColumnName("week_type");

                    b.HasKey("Id")
                        .HasName("pk_workout_weeks");

                    b.HasIndex("TrainingCycleId", "WeekNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_workout_weeks_training_cycle_id_week_number");

                    b.ToTable("workout_weeks", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SetStats.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SetStats.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("SetStats.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SetStats.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");
                });

            modelBuilder.Entity("SetStats.Core.Entities.CompletedSet", b =>
                {
                    b.HasOne("SetStats.Core.Entities.ProgrammedSet", "ProgrammedSet")
                        .WithMany()
                        .HasForeignKey("ProgrammedSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_completed_sets_programmed_sets_programmed_set_id");

                    b.Navigation("ProgrammedSet");
                });

            modelBuilder.Entity("SetStats.Core.Entities.ProgrammedSet", b =>
                {
                    b.HasOne("SetStats.Core.Entities.ExerciseType", "ExerciseType")
                        .WithMany()
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_programmed_sets_exercise_types_exercise_type_id");

                    b.HasOne("SetStats.Core.Entities.WorkoutDay", "WorkoutDay")
                        .WithMany()
                        .HasForeignKey("WorkoutDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_programmed_sets_workout_days_workout_day_id");

                    b.Navigation("ExerciseType");

                    b.Navigation("WorkoutDay");
                });

            modelBuilder.Entity("SetStats.Core.Entities.ProgressRecord", b =>
                {
                    b.HasOne("SetStats.Core.Entities.ExerciseType", "ExerciseType")
                        .WithMany()
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_progress_records_exercise_types_exercise_type_id");

                    b.HasOne("SetStats.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_progress_records_users_user_id");

                    b.Navigation("ExerciseType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SetStats.Core.Entities.TrainingCycle", b =>
                {
                    b.HasOne("SetStats.Core.Entities.TrainingProgram", "TrainingProgram")
                        .WithMany("TrainingCycles")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_training_cycles_training_programs_training_program_id");

                    b.HasOne("SetStats.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_training_cycles_users_user_id");

                    b.Navigation("TrainingProgram");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SetStats.Core.Entities.TrainingProgram", b =>
                {
                    b.HasOne("SetStats.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_training_programs_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SetStats.Core.Entities.UserMax", b =>
                {
                    b.HasOne("SetStats.Core.Entities.ExerciseType", "ExerciseType")
                        .WithMany()
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_maxes_exercise_types_exercise_type_id");

                    b.HasOne("SetStats.Core.Entities.TrainingCycle", "TrainingCycle")
                        .WithMany()
                        .HasForeignKey("TrainingCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_maxes_training_cycles_training_cycle_id");

                    b.HasOne("SetStats.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_maxes_users_user_id");

                    b.Navigation("ExerciseType");

                    b.Navigation("TrainingCycle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SetStats.Core.Entities.WorkoutDay", b =>
                {
                    b.HasOne("SetStats.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workout_days_users_user_id");

                    b.HasOne("SetStats.Core.Entities.WorkoutWeek", "WorkoutWeek")
                        .WithMany()
                        .HasForeignKey("WorkoutWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workout_days_workout_weeks_workout_week_id");

                    b.Navigation("User");

                    b.Navigation("WorkoutWeek");
                });

            modelBuilder.Entity("SetStats.Core.Entities.WorkoutWeek", b =>
                {
                    b.HasOne("SetStats.Core.Entities.TrainingCycle", "TrainingCycle")
                        .WithMany()
                        .HasForeignKey("TrainingCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workout_weeks_training_cycles_training_cycle_id");

                    b.Navigation("TrainingCycle");
                });

            modelBuilder.Entity("SetStats.Core.Entities.TrainingProgram", b =>
                {
                    b.Navigation("TrainingCycles");
                });
#pragma warning restore 612, 618
        }
    }
}
